<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>bannedit's musings</title><link href="https://bannedit.github.io/" rel="alternate"></link><link href="https://bannedit.github.io/feeds/all-en.atom.xml" rel="self"></link><id>https://bannedit.github.io/</id><updated>2019-08-29T05:13:00-04:00</updated><subtitle>Vulnerability Researcher</subtitle><entry><title>Automated ROP Chain Integrity</title><link href="https://bannedit.github.io/Automated-ROP-Chain-Integrity.html" rel="alternate"></link><published>2019-08-29T05:13:00-04:00</published><updated>2019-08-29T05:13:00-04:00</updated><author><name>bannedit</name></author><id>tag:bannedit.github.io,2019-08-29:/Automated-ROP-Chain-Integrity.html</id><summary type="html">&lt;p&gt;In software engineering unit testing has become the norm. In the world of exploit development testing and automation is lacking. This blog post will introduce a technique for automated testing of Return Oriented Programming (ROP) chain integrity.&lt;/p&gt;

&lt;p&gt;Admittedly, automation in exploit development does exist, there are tools such as mona &lt;a href=https://github.com/corelan/mona&gt;[1]&lt;/a&gt; and rop finding tools &lt;a href=https://github.com/JonathanSalwan/ROPgadget&gt;[2]&lt;/a&gt; &lt;a href=https://github.com/sashs/Ropper&gt;[3]&lt;/a&gt; that make the process a lot simpler than it once was. However, the point of this blog is to show that automation can go beyond automating the tasks involved in exploit development and also be applied to what happens next, maintaining working exploit code.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In software engineering unit testing has become the norm. In the world of exploit development testing and automation is lacking. This blog post will introduce a technique for automated testing of Return Oriented Programming (ROP) chain integrity.&lt;/p&gt;
&lt;p&gt;Admittedly, automation in exploit development does exist, there are tools such as mona &lt;a href="https://github.com/corelan/mona"&gt;[1]&lt;/a&gt; and rop finding tools &lt;a href="https://github.com/JonathanSalwan/ROPgadget"&gt;[2]&lt;/a&gt; &lt;a href="https://github.com/sashs/Ropper"&gt;[3]&lt;/a&gt; that make the process a lot simpler than it once was. However, the point of this blog is to show that automation can go beyond automating the tasks involved in exploit development and also be applied to what happens next, maintaining working exploit code.&lt;/p&gt;
&lt;p&gt;This is an idea I have had for a while, and I just wanted to get it out there. It is by no means perfect, but it should work in the vast majority of cases. I won't describe in detail the process of automating every aspect of this technique but, I will describe the technique in enough detail that anyone interested should be able to implement it on their own with minimal effort.&lt;/p&gt;
&lt;p&gt;Lets start by framing the premise, consider for a moment you have written an exploit for a vulnerability. These days the amount of time and effort involved in exploit development is always going up. Now consider the vulnerable software was just patched. This means we need to spend more time checking that the exploit still works for the new version of the software. &lt;/p&gt;
&lt;p&gt;Exploits in practice can be very fragile. Often times, exploit code relies on offsets from known locations. The art of exploitation over the years has advanced greatly and weaponized exploits are now a very real thing. However, even as techniques have advanced, the most minor of changes can sometimes cause an exploit to crash and burn.&lt;/p&gt;
&lt;p&gt;The naive approach to testing an exploit against a new version of the target software would just be to load up a Virtual Machine (VM) and launch the exploit and check if it still works. If it doesn't work we need to then determine why. Has the vendor patched the vulnerability? Has something else changed that has broken our exploit? Commonly the answer is patching has altered the offsets by adding or removing instructions to Dynamic Link Libraries (DLL) that the exploit ROP chain depends on.&lt;/p&gt;
&lt;p&gt;Now the question becomes, can we automate this process? The simple answer is yes we can. We can also improve upon it by automatically repairing when suitable.&lt;/p&gt;
&lt;h3&gt;ROP Primer&lt;/h3&gt;
&lt;p&gt;Before I delve into the gory details of how we could automate a solution to solve the problem of exploit testing, I want to cover the basics of Return Oriented Programming &lt;a href="https://en.wikipedia.org/wiki/Return-oriented_programming"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Return Oriented Programming is an exploitation technique that uses code that already exists within an application to perform useful actions. Typically, a ROP chain will simply change the protection flags on a page of memory to be executable. Alternatively, some ROP chains might allocate memory as executable and copy shellcode into the allocated memory. However, a ROP chain can perform any action that can be constructed from the code within the target process.&lt;/p&gt;
&lt;p&gt;ROP chains are comprised of gadgets, or small chunks of code that are followed by a return instruction. These gadgets are chained together by manipulating stack memory and constructing stack frames.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alt-text" src="resources/rop.png" title="Stack Layout Before and After Exploitation of a Stack Based Buffer Overflow"&gt;&lt;strong&gt;&lt;em&gt;Stack Layout Before and After Exploitation of a Stack Based Buffer Overflow - image source: &lt;a href="https://devel0pment.de/?p=366"&gt;https://devel0pment.de/?p=366&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above illustration depicts the stack memory at the time of exploiting a stack based buffer overflow. As can be seen a ROP chain is simply a chain of gadgets that reference code already existing in the vulnerable process. In this instance the ROP payload is building the arguments necessary to call the sys_execve system call on a 32bit Linux system. &lt;/p&gt;
&lt;p&gt;The gadgets:
* gadget 1 sets the &lt;em&gt;eax&lt;/em&gt; register to 11 (0x0b in hex) 
* gadget 2 sets the &lt;em&gt;ecx&lt;/em&gt; register to 0
* gadget 3 sets the &lt;em&gt;edx&lt;/em&gt; register to 0 
* gadget 4 constructs a pointer to the "/bin/sh" string in the &lt;em&gt;ebx&lt;/em&gt; register
* gadget 5 calls the sys_execve system call via the &lt;em&gt;int 0x80&lt;/em&gt; interrupt instruction&lt;/p&gt;
&lt;p&gt;If everything goes well, the exploit will cause the vulnerable process to spawn a &lt;em&gt;/bin/sh&lt;/em&gt; shell. &lt;/p&gt;
&lt;p&gt;If you find yourself lost here as to why the ROP chain is performing these actions, it might be worth checking out some tutorials related to linux shellcode &lt;a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Automated ROP Chain Integrity&lt;/h3&gt;
&lt;p&gt;Now that I've covered the basics of how ROP works, lets dive into the details of automated ROP chain integrity testing.&lt;/p&gt;
&lt;p&gt;First things first, let introduce the concept of a debug gadget. A debug gadget is a simple ROP gadget that simply points to a software breakpoint instruction. In the case of this blog I will be talking primarily about the x86 architecture so for our purposes the instruction is int3. The int3 instruction in x86 is a single byte opcode 0xcc. So, all we need to do is find a pointer to the opcode 0xcc. Note, typically ROP gadgets end with a ret instruction. For our purposes we only need a gadget that points to the int3 instruction because this will halt execution and any further instructions will not be executed.&lt;/p&gt;
&lt;p&gt;Now that we know what a debug gadget is and how to find one, we can discuss the proposed technique.&lt;/p&gt;
&lt;p&gt;The technique is to loop over execution of the exploit swapping out gadgets with debug gadgets. After each iteration we replace the previous gadget with the original. We can achieve everything we need using a scriptable debugger, such as, &lt;a href="https://github.com/bannedit/cdb"&gt;cdb&lt;/a&gt;, &lt;a href="https://github.com/MarioVilas/winappdbg"&gt;winappdbg&lt;/a&gt;, &lt;a href="https://github.com/pwndbg/pwndbg"&gt;pwndbg&lt;/a&gt;, just to name a few. We can monitor execution via a debugger, and loop over execution by restarting the process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alt-text" src="resources/ROP-Chain-Integrity.png" title="ROP Chain Integrity Algorithm"&gt; 
&lt;strong&gt;&lt;em&gt;ROP Chain Integrity Algorithm Iterations Visualized&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The above image depicts the ROP chain integrity algorithm in action. This image is using the same ROP chain previously discussed.&lt;/p&gt;
&lt;p&gt;If we hit the breakpoint in the debugger on the first iteration we know that our ROP chain is still being executed, we also know the vulnerability still exists.&lt;/p&gt;
&lt;p&gt;Next if we hit the debug breakpoint for the second gadget we know that the first gadget is still executing as expected. By continuing through we can loop over each gadget ensuring that they all execute as expected.&lt;/p&gt;
&lt;p&gt;Finally, testing the last gadget is pretty simple, we only need to monitor for the expected behavior. In this case, we would be looking for execution of &lt;em&gt;/bin/sh&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If we run into an instance where our debug gadget does not execute, we know then that the previous gadget is no longer functioning as expected and requires repair. The beauty of this algorithm is we can automate the repair process as well.&lt;/p&gt;
&lt;h3&gt;Automating Gadget Repair&lt;/h3&gt;
&lt;p&gt;To automate the repair of a gadget we need to know what the original instructions were. This can be done by defining a simple syntax within the exploit code and parsing that, or we can implement some kind of database storage system containing the ROP gadget instructions of a known good execution. There are likely other possible solutions as well.&lt;/p&gt;
&lt;p&gt;The only thing we really care about however, is knowing the instructions of the original gadget which has now become defunct. With this knowledge we can simply search for replacement gadgets. &lt;/p&gt;
&lt;p&gt;When we find a matching gadget we can even replace it in the exploit source code automatically and initiate another round of testing to ensure that the new gadget works as expected.&lt;/p&gt;
&lt;h3&gt;Potential Pitfalls&lt;/h3&gt;
&lt;p&gt;This technique has a lot to offer. However, it is tricky to implement. Firstly, we need to know the difference between a gadget and other data placed on the stack. This can be overcome by implementing some kind of syntax as explained earlier.&lt;/p&gt;
&lt;p&gt;Other pitfalls might occur during the automation of the repair process. For example, what do we do if we run into a situation where we cannot find suitable replacement gadgets. This could be solved in an automated fashion using a Intermediate Language (IL) and inferring the intent of the instructions of the gadget and trying to find other gadgets which translate to similar IL. Emulation can also be used to bruteforce the discovery of a suitable gadget, however this approach does lack a bit of elegance and could be time consuming. &lt;/p&gt;
&lt;p&gt;Either way, the majority of issues one might run into while implementing this technique can be overcome.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;While exploit development has matured over the years, there are still areas for improvement. Maintaining a working exploit manually is no trivial task. Testing is a common practice in software engineering and the same practice should be applied to exploit development. After all, exploit development is still a form of software engineering.&lt;/p&gt;
&lt;p&gt;Hopefully, the concepts introduced in this blog post will save exploit developers time in the future. Implementing the concepts should be relatively simple. The hardest aspect is programmatically replacing ROP gadgets and automating the repair process.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Corelan Mona Github &lt;a href="https://github.com/corelan/mona"&gt;https://github.com/corelan/mona&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jonathan Salwan ROPGadget Github &lt;a href="https://github.com/JonathanSalwan/ROPgadget"&gt;https://github.com/JonathanSalwan/ROPgadget&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sascha Schirra Ropper Github &lt;a href="https://github.com/sashs/Ropper"&gt;https://github.com/sashs/Ropper&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wikipedia Return Oriented Programming &lt;a href="https://en.wikipedia.org/wiki/Return-oriented_programming"&gt;https://en.wikipedia.org/wiki/Return-oriented_programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0x00sec Linux Shellcoding Part 1.0 &lt;a href="https://0x00sec.org/t/linux-shellcoding-part-1-0/289"&gt;https://0x00sec.org/t/linux-shellcoding-part-1-0/289&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scryh's RPISEC/MBE writeup lab05 &lt;a href="https://devel0pment.de/?p=366"&gt;https://devel0pment.de/?p=366&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="research"></category><category term="rop"></category><category term="exploit dev"></category></entry><entry><title>Virtual Machine Detection In The Browser</title><link href="https://bannedit.github.io/Virtual-Machine-Detection-In-The-Browser.html" rel="alternate"></link><published>2019-08-20T05:00:00-04:00</published><updated>2019-08-20T05:00:00-04:00</updated><author><name>bannedit</name></author><id>tag:bannedit.github.io,2019-08-20:/Virtual-Machine-Detection-In-The-Browser.html</id><summary type="html">&lt;p&gt;Virtual Machine (VM) detection is nothing new. Malware has been doing it for over a decade now. Over time the techniques have advanced as defenders learned new ways of avoiding VM detection. &lt;/p&gt;

&lt;p&gt;A while back a friend and I were working on a project related to exploit delivery via a web application for redteaming purposes. I wanted a way to fingerprint visitors of the site and hash the fingerprint data so I could look for potential repeat visitors. While investigating fingerprinting I stumbled upon something pretty interesting. I was looking at some code that collected information about WebGL capabilities. I quickly realized that some of the fingerprinting information could be useful for VM detection because vendor names were exposed. In this particular instance the string "VMWare" was contained within the WebGL information. After some more testing I also discovered that VirtualBox reported the same kind of information. &lt;/p&gt;

&lt;p&gt;Once I realized it was potentially possible to detect VMs from the browser I started to dig deeper and began searching for other research related to this discovery. I found a pretty well researched academic paper &lt;a href=http://yinzhicao.org/TrackingFree/crossbrowsertracking_NDSS17.pdf&gt;[1]&lt;/a&gt; related to tracking users across multiple browsers. This gave me some other potential techniques that could be applied to VM detection.&lt;/p&gt;

&lt;p&gt;The end goal of this research is to have multiple techniques for VM detection. Multiple techniques lead to much more accurate detection. Since some techniques are more false-positive prone than others, a weighting system can be applied to the detection capabilities. This allows us to generate detection confidence scoring. This can help account for inaccuracies of certain detection methods. Given enough testing and data it would then be possible to come up with a reasonable threshold value. If a browser scores above the threshold then it would most likely be within a VM. Alternatively, if the browser scored below the threshold value it could be considered to be running on physical hardware.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Virtual Machine (VM) detection is nothing new. Malware has been doing it for over a decade now. Over time the techniques have advanced as defenders learned new ways of avoiding VM detection.&lt;/p&gt;
&lt;p&gt;A while back a friend and I were working on a project related to exploit delivery via a web application for redteaming purposes. I wanted a way to fingerprint visitors of the site and hash the fingerprint data so I could look for potential repeat visitors. While investigating fingerprinting I stumbled upon something pretty interesting. I was looking at some code that collected information about WebGL capabilities. I quickly realized that some of the fingerprinting information could be useful for VM detection because vendor names were exposed. In this particular instance the string "VMWare" was contained within the WebGL information. After some more testing I also discovered that VirtualBox reported the same kind of information. &lt;/p&gt;
&lt;p&gt;Once I realized it was potentially possible to detect VMs from the browser I started to dig deeper and began searching for other research related to this discovery. I found a pretty well researched academic paper &lt;a href="http://yinzhicao.org/TrackingFree/crossbrowsertracking_NDSS17.pdf"&gt;[1]&lt;/a&gt; related to tracking users across multiple browsers. This gave me some other potential techniques that could be applied to VM detection.&lt;/p&gt;
&lt;p&gt;The end goal of this research is to have multiple techniques for VM detection. Multiple techniques lead to much more accurate detection. Since some techniques are more false-positive prone than others, a weighting system can be applied to the detection capabilities. This allows us to generate detection confidence scoring. This can help account for inaccuracies of certain detection methods. Given enough testing and data it would then be possible to come up with a reasonable threshold value. If a browser scores above the threshold then it would most likely be within a VM. Alternatively, if the browser scored below the threshold value it could be considered to be running on physical hardware.&lt;/p&gt;
&lt;h3&gt;Techniques&lt;/h3&gt;
&lt;p&gt;Now that I have covered some of the background information and history leading up to this blog post we can start to dig into the actual techniques.&lt;/p&gt;
&lt;p&gt;As mentioned prior in the introduction, WebGL can provide a lot of information about the OpenGL implementation including vendor information. The WEBGL_debug_renderer_info extension &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info"&gt;[2]&lt;/a&gt; can be used to query for debug information such as the WebGL vendor and rendered.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webgl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;debugInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WEBGL_debug_renderer_info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;vendor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;debugInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UNMASKED_VENDOR_WEBGL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;debugInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UNMASKED_RENDERER_WEBGL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vendor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additionally, extension availability can be queried using the &lt;strong&gt;&lt;em&gt;getExtension&lt;/em&gt;&lt;/strong&gt; method on a WebGL context. I have not fully explored this avenue but it might be possible to detect certain WebGL implementations provided by VMs based on the extensions available. Though this idea is likely very false-positive prone.&lt;/p&gt;
&lt;p&gt;Below is a screenshot from &lt;a href="https://webglreport.com"&gt;[3]&lt;/a&gt; WebGLReport a website dedicated to fingerprinting WebGL.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alt-text" src="resources/VirtualBox-VM-Win10-Chrome.png" title="VirtualBox Windows 10 x64 VM Google Chrome Visiting webglreport.com"&gt;
&lt;strong&gt;&lt;em&gt;VirtualBox Windows 10 x64 VM Google Chrome Visiting webglreport.com&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, it is important to note that this depends on how the VM is configured. In Virtual Box for example, setting the graphics controller setting under Display to VMSVGA will report cause WebGL to use CPU based implementations of OpenGL which is browser dependent. However, this could still be a useful indicator that the client machine is running in a VM because most modern hardware has integrated GPUs and can provide access to OpenGL natively. Just keep in mind that CPU based OpenGL implementations do not necessarily mean it is a VM outright.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alt-text" src="resources/VirtualBox-VM-Win10-Chrome-VMSVGA.png" title="VirtualBox Windows 10 x64 VM Google Chrome Using VMSVGA"&gt;
&lt;strong&gt;&lt;em&gt;VirtualBox Windows 10 x64 VM Google Chrome Using VMSVGA Visiting webglreport.com&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This screenshot depicts Google Chrome utilizing the CPU based OpenGL implementation renderer Google SwiftShader &lt;a href="https://github.com/google/swiftshader"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another technique seen in normal malware is to determine the screen width and height. This can be achieved in Javascript as well. Additionally, color depth and bits per pixel are other potentially good indicators related to the display.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;color_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorDepth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bitspp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pixelDepth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More details on the screen object can be found at &lt;a href="https://www.w3schools.com/jsref/obj_screen.asp"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Can we detect the amount of RAM on the client? You bet. Again using Javascript we can determine roughly the amount of RAM available on the browser. One quirk to note here is that the browser will only report RAM values in gigabytes (gb). It also has a quirk where it will only report up to 8gb and as low as 256mb (0.25gb). These ranges of values however, are still enough to use as a VM detection method. Most physical workstations these days come with at least 8gb of RAM. Detecting smaller amounts of RAM such as 2gb or less would be a good indicator the client browser is in a VM. The specification for the Device Memory can be found at &lt;a href="https://www.w3.org/TR/device-memory/"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deviceMemory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, the last technique I will be covering detects the number of CPU cores. This is done by performing timing attacks using multiple web workers running simultaneously. During my testing of this technique I found it to be very accurate. I tested this concept out using the &lt;a href="https://oswg.oftn.org/projects/core-estimator/demo/"&gt;[7]&lt;/a&gt; Core Estimator Demo site. A small number of CPU cores can be a decent VM indicator and has been used by malware in the past. Core Estimator also provides the Javascript libraries on github &lt;a href="https://github.com/oftn-oswg/core-estimator"&gt;[8]&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="alt-text" src="resources/VirtualBox-VM-Win10-Chrome-2-Cores.png" title="VirtualBox Windows 10 x64 VM Chrome With 2 CPU Cores"&gt;
&lt;strong&gt;&lt;em&gt;VirtualBox Windows 10 x64 VM Google Chrome 2 CPU Cores Tested with Core Estimator&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This blog post covered four unique VM detection capabilities that can be performed from Javascript. When I first discovered these techniques my initial thought was to apply the concepts toward VM detection. Hopefully, both defenders and offensive security professions can find something useful to apply these techniques toward.&lt;/p&gt;
&lt;p&gt;It is interesting to see that academics and various other researchers have applied some of the same concepts toward fingerprinting and privacy issues. &lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(Cross-)Browser Fingerprinting via OS and
Hardware Level Features &lt;a href="http://yinzhicao.org/TrackingFree/crossbrowsertracking_NDSS17.pdf"&gt;http://yinzhicao.org/TrackingFree/crossbrowsertracking_NDSS17.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN web-docs WEBGL_debug_renderer_info &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info"&gt;https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebGL Report &lt;a href="https://webglreport.com"&gt;https://webglreport.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Swiftshader Github &lt;a href="https://github.com/google/swiftshader"&gt;https://github.com/google/swiftshader&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;W3 Device Memory Specification &lt;a href="https://www.w3.org/TR/device-memory/"&gt;https://www.w3.org/TR/device-memory/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;W3 Schools - The Screen Object &lt;a href="https://www.w3schools.com/jsref/obj_screen.asp"&gt;https://www.w3schools.com/jsref/obj_screen.asp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Core Estimator Demo &lt;a href="https://oswg.oftn.org/projects/core-estimator/demo/"&gt;https://oswg.oftn.org/projects/core-estimator/demo/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Core Estimator Github &lt;a href="https://github.com/oftn-oswg/core-estimator"&gt;https://github.com/oftn-oswg/core-estimator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="research"></category><category term="vm detection"></category><category term="webgl"></category></entry></feed>